{
	"info": {
		"_postman_id": "97676677-1171-4b29-8b34-e70e929ebdd6",
		"name": "6steps-glow",
		"description": "The resource API endpoints provide a way for CRUD operations (Create, Read, Update, Delete) on a resource.\n\nHere's a brief overview of the admins endpoints and their corresponding HTTP methods Example:\n\n| HTTP Method | URI Pattern | Action | Description |\n| --- | --- | --- | --- |\n| GET | `/admins` | index | Display a listing of the resource. |\n| GET | `/admins/create` | create | Show the form for creating a new resource. |\n| POST | `/admins` | store | Store a newly created resource in storage. |\n| GET | `/admins/{id}` | show | Display the specified resource. |\n| GET | `/admins/{id}/edit` | edit | Show the form for editing the specified resource. |\n| PUT | `/admins/{id}` | update | Update the specified resource in storage. |\n| DELETE | `/admins/{id}` | destroy | Remove the specified resource from storage. |\n| PUT | /`admins`/{id}/toggleActive/1 | toggle Active | Activate the specified resource from storage. |\n| PUT | /`admins`/{id}/toggleActive/0 | toggle InActive | deactivate the specified resource from storage. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28144813",
		"_collection_link": "https://stepsa.postman.co/workspace/Team-Workspace~965cb56d-5a42-4cf0-844d-2c33110ffbb3/collection/28144813-97676677-1171-4b29-8b34-e70e929ebdd6?action=share&source=collection_link&creator=28144813"
	},
	"item": [
		{
			"name": "Brand",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "loginRegisterResendOtp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json(); \r",
											"pm.globals.set('otp', response.data.otp);\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData).to.have.property('errors');\r",
											"});\r",
											"\r",
											"pm.test(\"Data object contains the expected field - otp\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data).to.be.an('object');\r",
											"    pm.expect(responseData.data.otp).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Content type of the response is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"emade08@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apibrand}}loginRegisterResendOtp",
									"host": [
										"{{apibrand}}loginRegisterResendOtp"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| mobile | string | required, sa_mobile | \"966501234567\" |"
							},
							"response": []
						},
						{
							"name": "otpVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.globals.set('token', response.data.token) "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"emade08@gmail.com\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{apibrand}}otpVerify",
									"host": [
										"{{apibrand}}otpVerify"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type   | Constraints  | Example     |\n|------------|--------|--------------|-------------|\n| mobile     | string | required, sa_mobile | \"966501234567\""
							},
							"response": []
						}
					]
				},
				{
					"name": "Brands",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(brand) {\r",
											"        pm.expect(brand).to.have.property('brand_id');\r",
											"        pm.expect(brand).to.have.property('brand_name');\r",
											"        pm.expect(brand).to.have.property('mobile');\r",
											"        pm.expect(brand).to.have.property('email');\r",
											"        pm.expect(brand).to.have.property('logo');\r",
											"        pm.expect(brand).to.have.property('website_url');\r",
											"        pm.expect(brand).to.have.property('description');\r",
											"        pm.expect(brand).to.have.property('address');\r",
											"        pm.expect(brand).to.have.property('branches_no');\r",
											"        pm.expect(brand).to.have.property('tax_no');\r",
											"        pm.expect(brand).to.have.property('cr_no');\r",
											"        pm.expect(brand).to.have.property('deleted_at');\r",
											"        pm.expect(brand).to.have.property('created_at');\r",
											"        pm.expect(brand).to.have.property('updated_at');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Date is in a valid date format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"brand_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"brand_id\": null,\r\n    \"brand_name\": null,\r\n    \"mobile\": null,\r\n    \"email\": null,\r\n    \"email_verified_at\": null,\r\n    \"logo\": null,\r\n    \"website_url\": null,\r\n    \"description\": null,\r\n    \"address\": null,\r\n    \"branches_no\": null,\r\n    \"tax_no\": null,\r\n    \"cr_no\": null,\r\n    \"deleted_at\": null,\r\n    \"created_at\": null,\r\n    \"updated_at\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}brands",
									"host": [
										"{{brand}}brands"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve a list of brands with optional pagination, sorting, and filtering parameters. The response of this request can be documented as a JSON schema.\n\nAll paramters after dateTo as brand_id, brand_name, mobile, ..... and so on are acceptable to sortColumn paramter"
							},
							"response": []
						},
						{
							"name": "View",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for id, name, description, logo, createdAt, and updatedAt properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"    pm.expect(responseData.name).to.be.a('string');\r",
											"    pm.expect(responseData.description).to.be.a('string');\r",
											"    pm.expect(responseData.logo).to.be.a('string');\r",
											"    pm.expect(responseData.createdAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/);\r",
											"    pm.expect(responseData.updatedAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Id is a number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name should be a string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{brand}}brands/1",
									"host": [
										"{{brand}}brands"
									],
									"path": [
										"1"
									]
								},
								"description": "This endpoint retrieves the details of a specific brand with the ID of 1."
							},
							"response": []
						},
						{
							"name": "edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData).to.have.property('errors');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object contains create and item properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.include.all.keys('create', 'item');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>Field</th>\r",
											"        <th>Value</th>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Status</td>\r",
											"        <td>{{response.data.status}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Message</td>\r",
											"        <td>{{response.data.message}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Brand ID</td>\r",
											"        <td>{{response.data.item.brand_id}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Brand Name</td>\r",
											"        <td>{{response.data.item.brand_name}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Mobile</td>\r",
											"        <td>{{response.data.item.mobile}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Email</td>\r",
											"        <td>{{response.data.item.email}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Website URL</td>\r",
											"        <td>{{response.data.item.website_url}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Description</td>\r",
											"        <td>{{response.data.item.description}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Address</td>\r",
											"        <td>{{response.data.item.address}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Branches No</td>\r",
											"        <td>{{response.data.item.branches_no}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Tax No</td>\r",
											"        <td>{{response.data.item.tax_no}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>CR No</td>\r",
											"        <td>{{response.data.item.cr_no}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Created At</td>\r",
											"        <td>{{response.data.item.created_at_human}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Updated At</td>\r",
											"        <td>{{response.data.item.updated_at_human}}</td>\r",
											"    </tr>\r",
											"    <tr>\r",
											"        <td>Deleted At</td>\r",
											"        <td>{{response.data.item.deleted_at_human}}</td>\r",
											"    </tr>\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return { response: pm.response.json() }\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());\r",
											"// Stores the brand ID in an environment or global variable\r",
											"var brandId = pm.response.json().data.item.brand_id;\r",
											"pm.globals.set(\"brandId\", brandId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{brand}}brands/1/edit",
									"host": [
										"{{brand}}brands"
									],
									"path": [
										"1",
										"edit"
									]
								},
								"description": "### Retrieve Brand Edit Data\n\nThis endpoint makes an HTTP GET request to retrieve the edit data for a specific brand."
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.brand_name).to.be.a('string');\r",
											"    pm.expect(responseData.logo).to.be.a('string');\r",
											"    pm.expect(responseData.website_url).to.be.a('string');\r",
											"    pm.expect(responseData.description).to.be.a('string');\r",
											"    pm.expect(responseData.address).to.be.a('string');\r",
											"    pm.expect(responseData.branches_no).to.be.a('number');\r",
											"    pm.expect(responseData.tax_no).to.be.a('string');\r",
											"    pm.expect(responseData.cr_no).to.be.a('string');\r",
											"    pm.expect(responseData.cat_names).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Logo URL is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.logo).to.match(/^https?:\\/\\/.+\\..+$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Website URL is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.website_url).to.match(/^https?:\\/\\/www\\..+/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"brand_name\": \"Cosmic Clothing240\",\r\n    \"logo\": \"Brand/Cosmic.png\",\r\n    \"website_url\": \"https://cosmicclothing.com\",\r\n    \"description\": \"Cosmic Clothing is a leading fashion brand offering trendy and comfortable clothing for all ages.\",\r\n    \"address\": \"123 Fashion Avenue, Cityville, Country\",\r\n    \"branches_no\": \"10\",\r\n    \"mobile\": \"966522554789\",\r\n    \"tax_no\": \"TAX123456789101\",\r\n    \"cr_no\": \"1234567890\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}brands/1",
									"host": [
										"{{brand}}brands"
									],
									"path": [
										"1"
									]
								},
								"description": "The HTTP PUT request to update the brand information at `{{brand}}brands/1` requires a JSON payload in the raw request body. The payload should include the following fields:\n\n- `brand_name` (string): The name of the brand.\n    \n- `logo` (string): URL of the brand's logo.\n    \n- `website_url` (string): URL of the brand's website.\n    \n- `description` (string): Description of the brand.\n    \n- `address` (string): Address of the brand.\n    \n- `branches_no` (integer): Number of branches of the brand.\n    \n- `tax_no` (string): Tax number of the brand.\n    \n- `cr_no` (string): CR number of the brand.\n    \n- `cat_names` (array of strings): Array of category names associated with the brand.\n    \n\n### Request Body Parameters\n\n| **Field** | **Type** | **Validation Rules** | **Description** |\n| --- | --- | --- | --- |\n| `brand_name` | String | required, min:3, max:60, unique:brands,brand_name | The name of the brand (must be unique). |\n| `email` | String | required, email, min:7, max:50, unique:brands,email | The email address (must be unique and valid). |\n| `logo` | String | required, min:5, max:190 | The logo URL or file path. |\n| `website_url` | String | nullable, url, min:5, max:190 | The website URL (optional, must be valid). |\n| `description` | String | required, min:5, max:200 | A description of the brand. |\n| `address` | String | required, min:5, max:190 | The physical address of the brand. |\n| `branches_no` | Integer | required, numeric, min:0, max:2000 | The number of branches (must be a number). |\n| `tax_no` | String | nullable, min:15, max:15 | The tax number (optional, exact 15 characters). |\n| `cr_no` | String | nullable, min:10, max:10 | The commercial registration number (optional, exact 10 characters). |\n| `cat_names` | Array | required, array | Array of category names to which the brand belongs. |\n| `cat_names.\\*` | String | required, exists:cats,cat_name | Each category name must exist in the `cats` table. |\n\nThe response of this request is documented as a JSON schema."
							},
							"response": []
						}
					]
				},
				{
					"name": "Campaign",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{brand}}campaigns?paginationCounter=100&page=1&sortColumn=campaign_id&sortDirection=DESC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&brand_id&campaign_id=&campaign_title=&campaign_description=&start_at=&close_at=&conditions=&product_image=&ugc_no=&ugc_videos_no=&video_seconds_min=&video_seconds_max=&video_price=&total_price=&is_usg_show=&is_brand_show=&is_tiktok=&is_instagram=&is_youtube=&is_sent_to_content_creator=&deleted_at=&created_at=&updated_at=",
									"host": [
										"{{brand}}campaigns"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "campaign_id"
										},
										{
											"key": "sortDirection",
											"value": "DESC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "brand_id",
											"value": null
										},
										{
											"key": "campaign_id",
											"value": ""
										},
										{
											"key": "campaign_title",
											"value": ""
										},
										{
											"key": "campaign_description",
											"value": ""
										},
										{
											"key": "start_at",
											"value": ""
										},
										{
											"key": "close_at",
											"value": ""
										},
										{
											"key": "conditions",
											"value": ""
										},
										{
											"key": "product_image",
											"value": ""
										},
										{
											"key": "ugc_no",
											"value": ""
										},
										{
											"key": "ugc_videos_no",
											"value": ""
										},
										{
											"key": "video_seconds_min",
											"value": ""
										},
										{
											"key": "video_seconds_max",
											"value": ""
										},
										{
											"key": "video_price",
											"value": ""
										},
										{
											"key": "total_price",
											"value": ""
										},
										{
											"key": "is_usg_show",
											"value": ""
										},
										{
											"key": "is_brand_show",
											"value": ""
										},
										{
											"key": "is_tiktok",
											"value": ""
										},
										{
											"key": "is_instagram",
											"value": ""
										},
										{
											"key": "is_youtube",
											"value": ""
										},
										{
											"key": "is_sent_to_content_creator",
											"value": ""
										},
										{
											"key": "deleted_at",
											"value": ""
										},
										{
											"key": "created_at",
											"value": ""
										},
										{
											"key": "updated_at",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{brand}}campaigns/1",
									"host": [
										"{{brand}}campaigns"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{brand}}campaigns/create",
									"host": [
										"{{brand}}campaigns"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"campaign_title\": \"Amazing Campaign Title32\",\r\n    \"campaign_description\": \"This is a fantastic campaign description. Exciting!\",\r\n    \"start_at\": \"2024-08-27T16:51:33.000000Z\",\r\n    \"close_at\": \"2024-10-27T16:51:33.000000Z\",\r\n    \"conditions\": \"These are the campaign conditions. Please read carefully.\",\r\n    \"product_image\": \"campains/product_images/product_image.jpg\",\r\n    \"ugc_no\": 50,\r\n    \"ugc_videos_no\": 500,\r\n    \"video_seconds_min\": 10,\r\n    \"video_seconds_max\": 3600,\r\n    \"video_price\": 5000,\r\n    \"is_usg_show\": true,\r\n    \"is_brand_show\": false,\r\n    \"is_tiktok\": true,\r\n    \"is_instagram\": true,\r\n    \"is_youtube\": 0,\r\n    \"is_sent_to_content_creator\": 1,\r\n    \"cat_names\": [\"Cat1\", \"Cat2\"],\r\n    \"city_names\": [\"Dammam\", \"Jeddah\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}campaigns",
									"host": [
										"{{brand}}campaigns"
									]
								},
								"description": "### API Validation Rules\n\n| Field Name | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- |\n| `campaign_title` | \\`required | min:10 | max:190 |\n| `campaign_description` | \\`required | min:20 | max:200\\` |\n| `start_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:current_time\\` |\n| `close_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:start_at\\` |\n| `conditions` | \\`required | min:20 | max:200\\` |\n| `product_image` | \\`required | min:10 | max:190\\` |\n| `ugc_no` | \\`required | numeric | min:1 |\n| `ugc_videos_no` | \\`required | numeric | min:1 |\n| `video_seconds_min` | \\`required | numeric | min:1 |\n| `video_seconds_max` | \\`required | numeric | min:1 |\n| `video_price` | \\`required | min:1 | max:10000\\` |\n| `is_usg_show` | \\`required | boolean\\` | `true` |\n| `is_brand_show` | \\`required | boolean\\` | `false` |\n| `is_tiktok` | \\`required | boolean\\` | `true` |\n| `is_instagram` | \\`required | boolean\\` | `false` |\n| `is_youtube` | \\`required | boolean\\` | `true` |\n| `is_sent_to_content_creator` | \\`required | boolean\\` | `false` |\n| `cat_names` | \\`required | array\\` | `[\"Fashion\", \"Electronics\"]` |\n| `cat_names.\\*` | \\`required | exists:cats,cat_name\\` | `Fashion` |\n| `city_names` | \\`required | array\\` | `[\"New York\", \"Los Angeles\"]` |\n| `city_names.\\*` | \\`required | exists:cities,city_name\\` | `New York` |"
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{brand}}campaigns/1/edit",
									"host": [
										"{{brand}}campaigns"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"campaign_title\": \"Amazing Campaign Title32\",\r\n    \"campaign_description\": \"This is a fantastic campaign description. Exciting!\",\r\n    \"start_at\": \"2024-08-27T16:51:33.000000Z\",\r\n    \"close_at\": \"2024-10-27T16:51:33.000000Z\",\r\n    \"conditions\": \"These are the campaign conditions. Please read carefully.\",\r\n    \"product_image\": \"campains/product_images/product_image.jpg\",\r\n    \"ugc_no\": 50,\r\n    \"ugc_videos_no\": 500,\r\n    \"video_seconds_min\": 10,\r\n    \"video_seconds_max\": 3600,\r\n    \"video_price\": 5000,\r\n    \"is_usg_show\": true,\r\n    \"is_brand_show\": false,\r\n    \"is_tiktok\": true,\r\n    \"is_instagram\": true,\r\n    \"is_youtube\": 0,\r\n    \"is_sent_to_content_creator\": 1,\r\n    \"cat_names\": [\"Cat1\", \"Cat2\"],\r\n    \"city_names\": [\"Dammam\", \"Jeddah\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}campaigns/4",
									"host": [
										"{{brand}}campaigns"
									],
									"path": [
										"4"
									]
								},
								"description": "### API Validation Rules\n\n| Field Name | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- |\n| `campaign_title` | \\`required | min:10 | max:190 |\n| `campaign_description` | \\`required | min:20 | max:200\\` |\n| `start_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:current_time\\` |\n| `close_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:start_at\\` |\n| `conditions` | \\`required | min:20 | max:200\\` |\n| `product_image` | \\`required | min:10 | max:190\\` |\n| `ugc_no` | \\`required | numeric | min:1 |\n| `ugc_videos_no` | \\`required | numeric | min:1 |\n| `video_seconds_min` | \\`required | numeric | min:1 |\n| `video_seconds_max` | \\`required | numeric | min:1 |\n| `video_price` | \\`required | min:1 | max:10000\\` |\n| `is_usg_show` | \\`required | boolean\\` | `true` |\n| `is_brand_show` | \\`required | boolean\\` | `false` |\n| `is_tiktok` | \\`required | boolean\\` | `true` |\n| `is_instagram` | \\`required | boolean\\` | `false` |\n| `is_youtube` | \\`required | boolean\\` | `true` |\n| `is_sent_to_content_creator` | \\`required | boolean\\` | `false` |\n| `cat_names` | \\`required | array\\` | `[\"Fashion\", \"Electronics\"]` |\n| `cat_names.\\*` | \\`required | exists:cats,cat_name\\` | `Fashion` |\n| `city_names` | \\`required | array\\` | `[\"New York\", \"Los Angeles\"]` |\n| `city_names.\\*` | \\`required | exists:cities,city_name\\` | `New York` |"
							},
							"response": []
						},
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"campaign_status\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}campaigns/4/updateStatus",
									"host": [
										"{{brand}}campaigns"
									],
									"path": [
										"4",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| campaign_status | required, and must be one of: Active, Stoped, Ended | Active |"
							},
							"response": []
						}
					]
				},
				{
					"name": "CampaignRequest",
					"item": [
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"request_status\": \"RequestRejected\",\r\n    \"request_reject_reason\": \"tes t dfdfd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}requests/5/updateStatus",
									"host": [
										"{{brand}}requests"
									],
									"path": [
										"5",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| request_status | required, and must be one of: 'RequestRecieved', 'RequestAccepted', 'RequestRejected' | RequestRecieved |"
							},
							"response": []
						}
					]
				},
				{
					"name": "RequestVideos",
					"item": [
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"video_status\": \"VideoAccepted\",\r\n    \"video_reject_reason\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{brand}}requestvideos/1/updateStatus",
									"host": [
										"{{brand}}requestvideos"
									],
									"path": [
										"1",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| video_status | required, and must be one of: 'VideoAccepted', 'VideoRejected' | VideoAccepted |"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Creator",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "loginRegisterResendOtp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json(); \r",
											"pm.globals.set('otp', response.data.otp) "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\": \"966500554700\"\r\n}\r\n\r\n"
								},
								"url": {
									"raw": "{{apicreator}}loginRegisterResendOtp",
									"host": [
										"{{apicreator}}loginRegisterResendOtp"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type   | Constraints  | Example     |\n|------------|--------|--------------|-------------|\n| mobile     | string | required, sa_mobile | \"966501234567\""
							},
							"response": []
						},
						{
							"name": "otpVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.globals.set('token', response.data.token) \r",
											"console.log(response.data.token)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mobile\":\"966500554700\",\r\n    \"otp\": \"{{otp}}\"\r\n}"
								},
								"url": {
									"raw": "{{apicreator}}otpVerify",
									"host": [
										"{{apicreator}}otpVerify"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type   | Constraints  | Example     |\n|------------|--------|--------------|-------------|\n| mobile     | string | required, sa_mobile | \"966501234567\""
							},
							"response": []
						}
					]
				},
				{
					"name": "Creators",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"creator_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"creator_id\": null,\r\n    \"mobile\": null,\r\n    \"email\": null,\r\n    \"email_verified_at\": null,\r\n    \"creator_name\": null,\r\n    \"logo\": null,\r\n    \"bio\": null,\r\n    \"address\": null,\r\n    \"IBAN_no\": null,\r\n    \"Mawthooq_no\": null,\r\n    \"brith_date\": null,\r\n    \"deleted_at\": null,\r\n    \"created_at\": null,\r\n    \"updated_at\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}creators",
									"host": [
										"{{creator}}creators"
									]
								},
								"description": "\n### GET /creators\n\nThis endpoint retrieves a list of creators.\n\n#### Request\n- Method: GET\n- URL: {{creator}}creators\n- Headers: \n  - Content-Type: application/json\n- Body (raw):\n  ```json\n  {\n    \"paginationCounter\": 0,\n    \"page\": 0,\n    \"sortColumn\": \"\",\n    \"sortDirection\": \"\",\n    \"dateFrom\": \"\",\n    \"dateTo\": \"\",\n    \"creator_id\": null,\n    \"mobile\": null,\n    \"email\": null,\n    \"email_verified_at\": null,\n    \"creator_name\": null,\n    \"logo\": null,\n    \"bio\": null,\n    \"address\": null,\n    \"IBAN_no\": null,\n    \"Mawthooq_no\": null,\n    \"brith_date\": null,\n    \"deleted_at\": null,\n    \"created_at\": null,\n    \"updated_at\": null\n  }\n  ```\n\n#### Response\nThe response is in JSON format and follows the schema below:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"data\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"creator_id\": {\n                    \"type\": \"integer\"\n                  },\n                  \"mobile\": {\n                    \"type\": \"string\"\n                  },\n                  \"creator_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"logo\": {\n                    \"type\": \"string\"\n                  },\n                  \"bio\": {\n                    \"type\": \"string\"\n                  },\n                  \"address\": {\n                    \"type\": \"string\"\n                  },\n                  \"IBAN_no\": {\n                    \"type\": \"string\"\n                  },\n                  \"Mawthooq_no\": {\n                    \"type\": \"string\"\n                  },\n                  \"birth_date\": {\n                    \"type\": \"string\"\n                  },\n                  \"sampleVideos\": {\n                    \"type\": \"array\"\n                  },\n                  \"cats\": {\n                    \"type\": \"array\"\n                  },\n                  \"deleted_at\": {\n                    \"type\": [\"string\", \"null\"]\n                  },\n                  \"created_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"updated_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"created_at_human\": {\n                    \"type\": \"string\"\n                  },\n                  \"updated_at_human\": {\n                    \"type\": \"string\"\n                  },\n                  \"deleted_at_human\": {\n                    \"type\": [\"string\", \"null\"]\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"first\": {\n                  \"type\": \"string\"\n                },\n                \"last\": {\n                  \"type\": \"string\"\n                },\n                \"prev\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"next\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"meta\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"current_page\": {\n                  \"type\": \"integer\"\n                },\n                \"from\": {\n                  \"type\": \"integer\"\n                },\n                \"last_page\": {\n                  \"type\": \"integer\"\n                },\n                \"links\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"url\": {\n                        \"type\": [\"string\", \"null\"]\n                      },\n                      \"label\": {\n                        \"type\": \"string\"\n                      },\n                      \"active\": {\n                        \"type\": \"boolean\"\n                      }\n                    }\n                  }\n                },\n                \"path\": {\n                  \"type\": \"string\"\n                },\n                \"per_page\": {\n                  \"type\": \"integer\"\n                },\n                \"to\": {\n                  \"type\": \"integer\"\n                },\n                \"total\": {\n                  \"type\": \"integer\"\n                }\n              }\n            }\n          }\n        },\n        \"errors\": {\n          \"type\": [\"array\", \"null\"]\n        }\n      }\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{creator}}creators/1",
									"host": [
										"{{creator}}creators"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{creator}}creators/1/edit",
									"host": [
										"{{creator}}creators"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"creator_name\": \"Emad2030\", \r\n    \"logo\": \"creators/ema1d.png\",\r\n    \"bio\": \"bio Descriptions11\",\r\n    \"address\": \"Address detail1s11\",\r\n    \"birth_date\": \"1990-11-18\",\r\n    \"IBAN_no\": \"SA0680000470608016177411\",\r\n    \"Mawthooq_no\": \"12222\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}creators/1",
									"host": [
										"{{creator}}creators"
									],
									"path": [
										"1"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| creator_name | Creator's name (required) | \"John Doe\" |\n| mobile | Mobile number (required, Saudi Arabia format) | \"966501234567\" |\n| logo | required) | \"logo.png\" |\n| bio | Biography (required) | \"Lorem ipsum dolor sit amet\" |\n| address | Address (required) | \"123 Main Street, City, Country\" |\n| birth_date | Birth date (required, after 1925-07-11, before 10 years ago) | \"1990-05-20\" |\n| IBAN_no | IBAN number (optional, format: SA followed by 22 digits) | \"SA1234567890123456789012\" |\n| Mawthooq_no | Mawthooq number (optional, min: 5, max: 20 characters) | \"ABC123\" |\n| cat_names | Array of category names (required) | \\[\"Category1\", \"Category2\"\\] |\n| cat_names.\\* | Each category name in the array (required, must exist in 'cats' table) | \"Category1\" |"
							},
							"response": []
						},
						{
							"name": "sample videos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sampleVideos\": [\r\n        {\r\n            \"video_url\": \"https://youtube.com/video.mp4\", \r\n            \"video_order_no\": 1, \r\n            \"video_image_path\": \"sampleVideos/image.png\", \r\n            \"video_description\": \"Sample video description\"\r\n        },\r\n        {\r\n            \"video_url\": \"https://youtube.com/video2.mp4\", \r\n            \"video_order_no\": 2, \r\n            \"video_image_path\": \"sampleVideos/image.png\", \r\n            \"video_description\": \"Sample video description\"\r\n        },\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}creators/1/samplevideos",
									"host": [
										"{{creator}}creators"
									],
									"path": [
										"1",
										"samplevideos"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| sampleVideos | Array of sample videos (required) | \\[{\"video_url\": \"[video.mp4\"](https://video.mp4), \"video_order_no\": 1, \"video_image_path\": \"[image.png\"](https://image.png), \"video_description\": \"Sample video description\"}\\] |\n| sampleVideos.\\*.video_url | (required, min: 3, max: 190 characters) | \"video.mp4\" |\n| sampleVideos.\\*.video_order_no | Order number of the video (required, numeric, min: 0, max: 10000) | 1 |\n| sampleVideos.\\*.video_image_path | Image path of the video (required, min: 10, max: 190 characters) | \"[image.png\"](https://image.png) |\n| sampleVideos.\\*.video_description | Description of the video (optional, min: 10, max: 200 characters) | \"This is a sample video description\" |"
							},
							"response": []
						}
					]
				},
				{
					"name": "CampaignRequest",
					"item": [
						{
							"name": "create",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requests/create",
									"host": [
										"{{creator}}requests"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"campaign_id\": \"1\", \r\n    \"explanation\": \"This request explanation of campaign 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requests",
									"host": [
										"{{creator}}requests"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| explanation | string | required, min:5, max:500, | \"This request explanation of campaign 1\" |\n| campaign_id | string | required, exists:campaigns,campaign_id | 1 |"
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{creator}}requests/1/edit",
									"host": [
										"{{creator}}requests"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"explanation\": \"This request explanation of campaign 1 updated 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requests/1",
									"host": [
										"{{creator}}requests"
									],
									"path": [
										"1"
									]
								},
								"description": "| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| explanation | string | required, min:5, max:500, | \"This request explanation of campaign 1\" |"
							},
							"response": []
						}
					]
				},
				{
					"name": "RequestVideos",
					"item": [
						{
							"name": "create",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requestvideos/create",
									"host": [
										"{{creator}}requestvideos"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"request_id\": 5,\r\n    \"video_url\": \"https://video_url.com6w\",\r\n    \"video_image_path\": \"video_image_path\",\r\n    \"video_description\": \"video_description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requestvideos",
									"host": [
										"{{creator}}requestvideos"
									]
								},
								"description": "### API Validation Rules  \n\n| Field Name             | Validation Rules                                   | Example Value                  | Description                                                    |\n|------------------------|---------------------------------------------------|--------------------------------|----------------------------------------------------------------|\n| `request_id`           | `required|exists:campaign_requests,request_id`   | `123`                          | Required. Must exist in the `campaign_requests` table.        |\n| `video_url`            | `required|url|min:5|max:191`                      | `https://example.com/video`   | Required. Must be a valid URL, min 5 and max 191 characters.  |\n| `video_image_path`     | `required|min:5|max:191`                          | `path/to/image.jpg`           | Required. Min 5 and max 191 characters.                        |\n| `video_description`    | `required|min:5|max:500`                          | `This is a video description.` | Required. Min 5 and max 500 characters.                        |\n "
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{creator}}requestvideos/1/edit",
									"host": [
										"{{creator}}requestvideos"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"video_url\": \"https://video_url2.com\",\r\n    \"video_image_path\": \"video_image_path\",\r\n    \"video_description\": \"video_description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{creator}}requestvideos/2",
									"host": [
										"{{creator}}requestvideos"
									],
									"path": [
										"2"
									]
								},
								"description": "### API Validation Rules  \n\n| Field Name             | Validation Rules                                   | Example Value                  | Description                                                    |\n|------------------------|---------------------------------------------------|--------------------------------|----------------------------------------------------------------|\n| `request_id`           | `required|exists:campaign_requests,request_id`   | `123`                          | Required. Must exist in the `campaign_requests` table.        |\n| `video_url`            | `required|url|min:5|max:191`                      | `https://example.com/video`   | Required. Must be a valid URL, min 5 and max 191 characters.  |\n| `video_image_path`     | `required|min:5|max:191`                          | `path/to/image.jpg`           | Required. Min 5 and max 191 characters.                        |\n| `video_description`    | `required|min:5|max:500`                          | `This is a video description.` | Required. Min 5 and max 500 characters.                        |\n "
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.globals.set('token', response.data.token)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@6stepsa.com\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{apiadmin}}login",
									"host": [
										"{{apiadmin}}login"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type   | Constraints  | Example     |\n|------------|--------|--------------|-------------|\n| mobile     | string | required, sa_mobile | \"966501234567\""
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}cats?paginationCounter=100&page=1&sortColumn=cat_name&sortDirection=ASC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&cat_id=&cat_name",
									"host": [
										"{{admin}}cats"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "cat_name"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "cat_id",
											"value": ""
										},
										{
											"key": "cat_name",
											"value": null
										}
									]
								},
								"description": "### Query Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| paginationCounter | numeric | nullable, min:1, max:1000 | 10 |\n| page | numeric | nullable, min:1, max:1000 | 2 |\n| sortDirection | string | nullable, in:ASC,DESC | \"ASC\" |\n| dateFrom | string | nullable, date_format:Y-m-d H:i:s | \"2024-01-01 12:00:00\" |\n| dateTo | string | nullable, date_format:Y-m-d H:i:s | \"2024-06-30 23:59:59\" |\n| sortColumn | string | nullable, in:cat_name,cat_id | \"cat_name\" |"
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cat_name\": \"Cat33\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}cats",
									"host": [
										"{{admin}}cats"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| cat_name | string | required, min:3, max:50, unique:cats,cat_name | \"Fluffy\" |"
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}cats/1",
									"host": [
										"{{admin}}cats"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cat_name\": \"Musisc2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}cats/1",
									"host": [
										"{{admin}}cats"
									],
									"path": [
										"1"
									]
								},
								"description": "StartFragment### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| cat_name | string | required, min:3, max:50, unique:cats,cat_name | \"Fluffy\" |"
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}cats/1",
									"host": [
										"{{admin}}cats"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}cats/2/toggleActive/1",
									"host": [
										"{{admin}}cats"
									],
									"path": [
										"2",
										"toggleActive",
										"1"
									]
								}
							},
							"response": [
								{
									"name": "ToggleActive - Inactive",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{admin}}cats/1/toggleActive/0",
											"host": [
												"{{admin}}cats"
											],
											"path": [
												"1",
												"toggleActive",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:42:45 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"cat_id\": 1,\n            \"cat_name\": \"Musisc2\",\n            \"deleted_at\": null,\n            \"created_at\": \"2024-07-16 08:31:09\",\n            \"updated_at\": \"2024-07-16 08:34:06\"\n        }\n    },\n    \"errors\": null\n}"
								},
								{
									"name": "ToggleActive - Active",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{admin}}cats/1/toggleActive/1",
											"host": [
												"{{admin}}cats"
											],
											"path": [
												"1",
												"toggleActive",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:42:45 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"cat_id\": 1,\n            \"cat_name\": \"Musisc2\",\n            \"deleted_at\": null,\n            \"created_at\": \"2024-07-16 08:31:09\",\n            \"updated_at\": \"2024-07-16 08:34:06\"\n        }\n    },\n    \"errors\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "City",
					"item": [
						{
							"name": "List",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}cities?paginationCounter=100&page=1&sortColumn=city_id&sortDirection=DESC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&city_name=",
									"host": [
										"{{admin}}cities"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "city_id"
										},
										{
											"key": "sortDirection",
											"value": "DESC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "city_name",
											"value": ""
										}
									]
								},
								"description": "### Query Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| paginationCounter | numeric | nullable, min:1, max:1000 | 10 |\n| page | numeric | nullable, min:1, max:1000 | 2 |\n| sortDirection | string | nullable, in:ASC,DESC | \"ASC\" |\n| dateFrom | string | nullable, date_format:Y-m-d H:i:s | \"2024-01-01 12:00:00\" |\n| dateTo | string | nullable, date_format:Y-m-d H:i:s | \"2024-06-30 23:59:59\" |\n| sortColumn | string | nullable, in:city_name,city_id | \"city_name,city_id\" |"
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city_name\": \"المنامة\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}cities",
									"host": [
										"{{admin}}cities"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| city_name | string | required, min:3, max:50, unique:cities,city_name | \"Gada\" |"
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}cities/1",
									"host": [
										"{{admin}}cities"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"city_name\": \"المنامة تحديث\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}cities/6",
									"host": [
										"{{admin}}cities"
									],
									"path": [
										"6"
									]
								},
								"description": "StartFragment### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| city_name | string | required, min:3, max:50, unique:cities,city_name | \"Fluffy\" |"
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}cities/6",
									"host": [
										"{{admin}}cities"
									],
									"path": [
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}cities/6/toggleActive/0",
									"host": [
										"{{admin}}cities"
									],
									"path": [
										"6",
										"toggleActive",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "ToggleActive - Inactive",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{admin}}cities/6/toggleActive/0",
											"host": [
												"{{admin}}cities"
											],
											"path": [
												"6",
												"toggleActive",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:40:38 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"city_id\": 6,\n            \"city_name\": \"المنامة تحديث\",\n            \"deleted_at\": \"2024-07-16 08:40:38\",\n            \"created_at\": \"2024-07-16 08:40:01\",\n            \"updated_at\": \"2024-07-16 08:40:38\"\n        }\n    },\n    \"errors\": null\n}"
								},
								{
									"name": "ToggleActive - Activate",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{admin}}cities/6/toggleActive/1",
											"host": [
												"{{admin}}cities"
											],
											"path": [
												"6",
												"toggleActive",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:41:29 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"city_id\": 6,\n            \"city_name\": \"المنامة تحديث\",\n            \"deleted_at\": null,\n            \"created_at\": \"2024-07-16 08:40:01\",\n            \"updated_at\": \"2024-07-16 08:41:29\"\n        }\n    },\n    \"errors\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    const requiredFields = ['admin_id', 'admin_name', 'email', 'mobile', 'logo', 'address', 'websit_url', 'created_at', 'updated_at'];\r",
											"    requiredFields.forEach(function(field) {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data array is present and contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.data.data).to.exist.and.to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"admin_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"admin_id\": null,\r\n    \"admin_name\": null,\r\n    \"email\": null,\r\n    \"mobile\": null,\r\n    \"logo\": null,\r\n    \"address\": null,\r\n    \"websit_url\": null,\r\n    \"email_verified_at\": null,\r\n    \"password\": null,\r\n    \"deleted_at\": null,\r\n    \"created_at\": null,\r\n    \"updated_at\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}admins",
									"host": [
										"{{admin}}admins"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve a list of admins. The request includes the following parameters in the raw request body:\n\n- paginationCounter (integer): The pagination counter for the list\n    \n- page (integer): The page number\n    \n- sortColumn (string): The column to sort the list by\n    \n- sortDirection (string): The direction for sorting\n    \n- dateFrom (string): Start date for filtering\n    \n- dateTo (string): End date for filtering\n    \n- admin_id (null): Filter by admin ID\n    \n- admin_name (null): Filter by admin name\n    \n- email (null): Filter by email\n    \n- mobile (null): Filter by mobile number\n    \n- logo (null): Filter by logo\n    \n- address (null): Filter by address\n    \n- websit_url (null): Filter by website URL\n    \n- email_verified_at (null): Filter by email verification date\n    \n- password (null): Filter by password\n    \n- deleted_at (null): Filter by deletion date\n    \n- created_at (null): Filter by creation date\n    \n- updated_at (null): Filter by update date"
							},
							"response": []
						},
						{
							"name": "View",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.item).to.have.property('admin_id').that.is.a('number');\r",
											"    pm.expect(responseData.data.item).to.have.property('admin_name').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('email').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('mobile').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('logo').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('address');\r",
											"    pm.expect(responseData.data.item).to.have.property('websit_url');\r",
											"    pm.expect(responseData.data.item).to.have.property('email_verified_at').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('deleted_at');\r",
											"    pm.expect(responseData.data.item).to.have.property('created_at').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('updated_at').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('created_at_human').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('updated_at_human').that.is.a('string');\r",
											"    pm.expect(responseData.data.item).to.have.property('deleted_at_human');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}admins/1",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"1"
									]
								},
								"description": "\nThe endpoint retrieves information about a specific admin with the ID of 1. The response is in JSON format and has the following schema:\n\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"item\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"admin_id\": {\n                            \"type\": \"integer\"\n                        },\n                        \"admin_name\": {\n                            \"type\": \"string\"\n                        },\n                        \"email\": {\n                            \"type\": \"string\"\n                        },\n                        \"mobile\": {\n                            \"type\": \"string\"\n                        },\n                        \"logo\": {\n                            \"type\": \"string\"\n                        },\n                        \"address\": {\n                            \"type\": [\"string\", \"null\"]\n                        },\n                        \"websit_url\": {\n                            \"type\": [\"string\", \"null\"]\n                        },\n                        \"email_verified_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"deleted_at\": {\n                            \"type\": [\"string\", \"null\"]\n                        },\n                        \"created_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"updated_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"created_at_human\": {\n                            \"type\": \"string\"\n                        },\n                        \"updated_at_human\": {\n                            \"type\": \"string\"\n                        },\n                        \"deleted_at_human\": {\n                            \"type\": [\"string\", \"null\"]\n                        }\n                    },\n                    \"required\": [\"admin_id\", \"admin_name\", \"email\", \"mobile\", \"logo\", \"email_verified_at\", \"created_at\", \"updated_at\", \"created_at_human\", \"updated_at_human\"]\n                },\n                \"errors\": {\n                    \"type\": [\"array\", \"null\"],\n                    \"items\": {}\n                }\n            },\n            \"required\": [\"item\"]\n        }\n    },\n    \"required\": [\"status\", \"message\", \"data\"]\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "create",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}admins/create",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"admin_name\": \"Emadeldeen\",\r\n    \"email\": \"emade090@gmail.com\",\r\n    \"mobile\": \"966522666992\",\r\n    \"logo\": \"Admin/emad.png\",\r\n    \"address\": \"Sohag, Egypt\",\r\n    \"websit_url\": \"https://emadw3.com\",\r\n    \"password\": \"myPassword\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}admins",
									"host": [
										"{{admin}}admins"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Type | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- | --- |\n| `admin_name` | String | required, min:5, max:50, unique | `AdminJohn` | The name of the admin, must be unique. |\n| `email` | String | required, min:5, max:60, unique | `admin@example.com` | The email address of the admin, must be unique and valid. |\n| `mobile` | String | required, sa_mobile, unique | `+1234567890` | The mobile number of the admin, must be in a specific format and unique. |\n| `logo` | String | nullable, min:5, max:190 | `https://example.com/logo.png` | The URL for the admin logo (optional). |\n| `address` | String | nullable, min:5, max:190 | `123 Admin St, Admin City` | The address of the admin (optional). |\n| `website_url` | String | nullable, url, min:5, max:190 | `https://example.com` | The website URL of the admin (optional). |\n| `password` | String | required, min:8, max:12 | `SecurePass1!` | The password for the admin account. |\n\n### Description of Fields:\n\n- **admin_name**: Must be unique among all admins and has length constraints.\n    \n- **email**: Needs to be a valid email format and unique across administrators.\n    \n- **mobile**: Should follow specific mobile number formatting and be unique.\n    \n- **logo**: An optional field where you can provide a URL for the logo image.\n    \n- **address**: An optional address for the admin.\n    \n- **website_url**: An optional field for the admin's website, must be in URL format if provided.\n    \n- **password**: A required field that should be secure and follow length constraints."
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}admins/6/edit",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"6",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"admin_name\": \"Emadeldeen\",\r\n    \"email\": \"emade090@gmail.com\",\r\n    \"mobile\": \"966522666992\",\r\n    \"logo\": \"Admin/emad.png\",\r\n    \"address\": \"Sohag, Egypt\",\r\n    \"websit_url\": \"https://emadw3.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}admins/16",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"16"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Type | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- | --- |\n| `admin_name` | String | required, min:5, max:50, unique | `AdminJohn` | The name of the admin, must be unique. |\n| `email` | String | required, min:5, max:60, unique | `admin@example.com` | The email address of the admin, must be unique and valid. |\n| `mobile` | String | required, sa_mobile, unique | `+1234567890` | The mobile number of the admin, must be in a specific format and unique. |\n| `logo` | String | nullable, min:5, max:190 | `https://example.com/logo.png` | The URL for the admin logo (optional). |\n| `address` | String | nullable, min:5, max:190 | `123 Admin St, Admin City` | The address of the admin (optional). |\n| `website_url` | String | nullable, url, min:5, max:190 | `https://example.com` | The website URL of the admin (optional). |\n\n\n### Description of Fields:\n\n- **admin_name**: Must be unique among all admins and has length constraints.\n    \n- **email**: Needs to be a valid email format and unique across administrators.\n    \n- **mobile**: Should follow specific mobile number formatting and be unique.\n    \n- **logo**: An optional field where you can provide a URL for the logo image.\n    \n- **address**: An optional address for the admin.\n    \n- **website_url**: An optional field for the admin's website, must be in URL format if provided.\n     "
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}admins/16",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"16"
									]
								}
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}admins/16/toggleActive/0",
									"host": [
										"{{admin}}admins"
									],
									"path": [
										"16",
										"toggleActive",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Brands",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Updated response time to 300ms\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Response time is within an acceptable range\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate the response against the JSON schema\r",
											"pm.test(\"Validate the response against the JSON schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    // Add more specific checks based on the JSON schema\r",
											"});\r",
											"\r",
											"// Verify sorting and filtering parameters are working as expected\r",
											"pm.test(\"Verify sorting and filtering parameters are working as expected\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    // Verify sorting\r",
											"    const sortingOptions = [\"brand_id\", \"brand_name\", \"mobile\"]; // Add more sorting options as needed\r",
											"    sortingOptions.forEach(option => {\r",
											"        pm.expect(responseData).to.be.sortedBy(option, { 'isCaseSensitive': true, 'descending': false });\r",
											"        pm.expect(responseData).to.be.sortedBy(option, { 'isCaseSensitive': true, 'descending': true });\r",
											"    });\r",
											"\r",
											"    // Verify filtering\r",
											"    const filterOptions = [\"brand_id\", \"brand_name\", \"mobile\"]; // Add more filtering options as needed\r",
											"    filterOptions.forEach(option => {\r",
											"        pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"        responseData.forEach(item => {\r",
											"            pm.expect(item[option]).to.exist; // Check if the filter option exists in each item\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Optional pagination is functioning correctly\r",
											"pm.test(\"Optional pagination is functioning correctly\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('items');\r",
											"    pm.expect(responseData.items.data).to.be.an('array').that.is.not.empty;\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('meta');\r",
											"    pm.expect(responseData.meta).to.be.an('object');\r",
											"    pm.expect(responseData.meta).to.have.property('current_page');\r",
											"    pm.expect(responseData.meta).to.have.property('from');\r",
											"    pm.expect(responseData.meta).to.have.property('last_page');\r",
											"    pm.expect(responseData.meta).to.have.property('links');\r",
											"    pm.expect(responseData.meta).to.have.property('path');\r",
											"    pm.expect(responseData.meta).to.have.property('per_page');\r",
											"    pm.expect(responseData.meta).to.have.property('to');\r",
											"    pm.expect(responseData.meta).to.have.property('total');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"brand_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"brand_id\": null,\r\n    \"brand_name\": null,\r\n    \"mobile\": null,\r\n    \"email\": null,\r\n    \"email_verified_at\": null,\r\n    \"logo\": null,\r\n    \"website_url\": null,\r\n    \"description\": null,\r\n    \"address\": null,\r\n    \"branches_no\": null,\r\n    \"tax_no\": null,\r\n    \"cr_no\": null,\r\n    \"deleted_at\": null,\r\n    \"created_at\": null,\r\n    \"updated_at\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}brands",
									"host": [
										"{{admin}}brands"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve a list of brands with optional pagination, sorting, and filtering parameters. The response of this request can be documented as a JSON schema.\n\nAll paramters after dateTo as brand_id, brand_name, mobile, ..... and so on are acceptable to sortColumn paramter"
							},
							"response": []
						},
						{
							"name": "View",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fixed syntax and updated response time test\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the schema of the response body\", function () {\r",
											"    const responseData = pm.response.json().data.item;\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('brand_id');\r",
											"    pm.expect(responseData).to.have.property('brand_name');\r",
											"    pm.expect(responseData).to.have.property('description');\r",
											"    pm.expect(responseData).to.have.property('logo');\r",
											"    pm.expect(responseData).to.have.property('created_at');\r",
											"    pm.expect(responseData).to.have.property('updated_at');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}brands/1",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - name, description, logo, and status\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.description).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.logo).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
											"});\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}brands/create",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"create"
									]
								},
								"description": "\nThis endpoint sends an HTTP GET request to the {{admin}}brands/create URL. \n\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"brand_name\": \"Cosmic Clothing2\",\r\n    \"email\": \"emade02@gmail.com\",\r\n    \"logo\": \"Brand/Cosmic.png\",\r\n    \"website_url\": \"https://cosmicclothing.com\",\r\n    \"description\": \"Cosmic Clothing is a leading fashion brand offering trendy and comfortable clothing for all ages.\",\r\n    \"address\": \"123 Fashion Avenue, Cityville, Country\",\r\n    \"branches_no\": 10,\r\n    \"tax_no\": \"TAX123456789101\",\r\n    \"cr_no\": \"1234567890\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}brands",
									"host": [
										"{{admin}}brands"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| creator_name | Creator's name (required) | \"John Doe\" |\n| mobile | Mobile number (required, Saudi Arabia format) | \"966501234567\" |\n| logo | required) | \"logo.png\" |\n| bio | Biography (required) | \"Lorem ipsum dolor sit amet\" |\n| address | Address (required) | \"123 Main Street, City, Country\" |\n| birth_date | Birth date (required, after 1925-07-11, before 10 years ago) | \"1990-05-20\" |\n| IBAN_no | IBAN number (optional, format: SA followed by 22 digits) | \"SA1234567890123456789012\" |\n| Mawthooq_no | Mawthooq number (optional, min: 5, max: 20 characters) | \"ABC123\" |\n| cat_names | Array of category names (required) | \\[\"Category1\", \"Category2\"\\] |\n| cat_names.\\* | Each category name in the array (required, must exist in 'cats' table) | \"Category1\" |"
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}brands/1/edit",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"1",
										"edit"
									]
								},
								"description": "\nThe `GET` request to `{{admin}}brands/1/edit` endpoint retrieves the details of a specific brand with the ID 1 for editing.\n\n### Response\nThe response is a JSON object with the following schema:\n\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"create\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"city_names\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"cat_names\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"item\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"brand_id\": {\n                            \"type\": \"integer\"\n                        },\n                        \"brand_name\": {\n                            \"type\": \"string\"\n                        },\n                        \"mobile\": {\n                            \"type\": \"string\"\n                        },\n                        \"email\": {\n                            \"type\": \"string\"\n                        },\n                        \"email_verified_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"logo\": {\n                            \"type\": \"string\"\n                        },\n                        \"website_url\": {\n                            \"type\": \"string\"\n                        },\n                        \"description\": {\n                            \"type\": \"string\"\n                        },\n                        \"address\": {\n                            \"type\": \"string\"\n                        },\n                        \"branches_no\": {\n                            \"type\": \"string\"\n                        },\n                        \"tax_no\": {\n                            \"type\": \"string\"\n                        },\n                        \"cr_no\": {\n                            \"type\": \"string\"\n                        },\n                        \"cats\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"deleted_at\": {\n                            \"type\": [\"string\", \"null\"]\n                        },\n                        \"created_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"updated_at\": {\n                            \"type\": \"string\"\n                        },\n                        \"created_at_human\": {\n                            \"type\": \"string\"\n                        },\n                        \"updated_at_human\": {\n                            \"type\": \"string\"\n                        },\n                        \"deleted_at_human\": {\n                            \"type\": [\"string\", \"null\"]\n                        }\n                    }\n                }\n            }\n        },\n        \"errors\": {\n            \"type\": [\"array\", \"null\"]\n        }\n    }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData).to.have.property('errors');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the data object schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status', true);\r",
											"    pm.expect(responseData).to.have.property('message', \"\");\r",
											"    pm.expect(responseData).to.have.property('data').that.is.an('object');\r",
											"    \r",
											"    const brandData = responseData.data.item;\r",
											"    pm.expect(brandData).to.have.property('brand_id', 0);\r",
											"    pm.expect(brandData).to.have.property('brand_name', \"\");\r",
											"    pm.expect(brandData).to.have.property('mobile', null);\r",
											"    pm.expect(brandData).to.have.property('email', \"\");\r",
											"    pm.expect(brandData).to.have.property('email_verified_at', \"\");\r",
											"    pm.expect(brandData).to.have.property('logo', \"\");\r",
											"    pm.expect(brandData).to.have.property('website_url', \"\");\r",
											"    pm.expect(brandData).to.have.property('description', \"\");\r",
											"    pm.expect(brandData).to.have.property('address', \"\");\r",
											"    pm.expect(brandData).to.have.property('branches_no', \"\");\r",
											"    pm.expect(brandData).to.have.property('tax_no', \"\");\r",
											"    pm.expect(brandData).to.have.property('cr_no', \"\");\r",
											"    pm.expect(brandData).to.have.property('cats').that.is.an('array');\r",
											"    pm.expect(brandData).to.have.property('deleted_at', null);\r",
											"    pm.expect(brandData).to.have.property('created_at', \"\");\r",
											"    pm.expect(brandData).to.have.property('updated_at', \"\");\r",
											"    pm.expect(brandData).to.have.property('created_at_human', \"\");\r",
											"    pm.expect(brandData).to.have.property('updated_at_human', \"\");\r",
											"    pm.expect(brandData).to.have.property('deleted_at_human', null);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response email format is valid\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is valid\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"brand_name\": \"Cosmic Clothing9\",\r\n    \"email\": \"emade01@gmail.com\",\r\n    \"logo\": \"Brand/Cosmic.png\",\r\n    \"website_url\": \"https://cosmicclothing.com\",\r\n    \"description\": \"Cosmic Clothing is a leading fashion brand offering trendy and comfortable clothing for all ages.\",\r\n    \"address\": \"123 Fashion Avenue, Cityville, Country\",\r\n    \"branches_no\": \"10\",\r\n    \"mobile\": \"966522554789\",\r\n    \"tax_no\": \"TAX123456789101\",\r\n    \"cr_no\": \"1234567890\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}brands/1",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"1"
									]
								},
								"description": "The HTTP PUT request to update the brand information at `{{brand}}brands/1` requires a JSON payload in the raw request body. The payload should include the following fields:\n\n- `brand_name` (string): The name of the brand.\n    \n- `logo` (string): URL of the brand's logo.\n    \n- `website_url` (string): URL of the brand's website.\n    \n- `description` (string): Description of the brand.\n    \n- `address` (string): Address of the brand.\n    \n- `branches_no` (integer): Number of branches of the brand.\n    \n- `tax_no` (string): Tax number of the brand.\n    \n- `cr_no` (string): CR number of the brand.\n    \n- `cat_names` (array of strings): Array of category names associated with the brand.\n    \n\n### Request Body Parameters\n\n| **Field** | **Type** | **Validation Rules** | **Description** |\n| --- | --- | --- | --- |\n| `brand_name` | String | required, min:3, max:60, unique:brands,brand_name | The name of the brand (must be unique). |\n| `email` | String | required, email, min:7, max:50, unique:brands,email | The email address (must be unique and valid). |\n| `logo` | String | required, min:5, max:190 | The logo URL or file path. |\n| `website_url` | String | nullable, url, min:5, max:190 | The website URL (optional, must be valid). |\n| `description` | String | required, min:5, max:200 | A description of the brand. |\n| `address` | String | required, min:5, max:190 | The physical address of the brand. |\n| `branches_no` | Integer | required, numeric, min:0, max:2000 | The number of branches (must be a number). |\n| `tax_no` | String | nullable, min:15, max:15 | The tax number (optional, exact 15 characters). |\n| `cr_no` | String | nullable, min:10, max:10 | The commercial registration number (optional, exact 10 characters). |\n| `cat_names` | Array | required, array | Array of category names to which the brand belongs. |\n| `cat_names.\\*` | String | required, exists:cats,cat_name | Each category name must exist in the `cats` table. |\n\nThe response of this request is documented as a JSON schema."
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}brands/5",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"5"
									]
								},
								"description": "The HTTP DELETE request is used to delete a specific brand with the ID of 1 in the admin system."
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}brands/2/toggleActive/1",
									"host": [
										"{{admin}}brands"
									],
									"path": [
										"2",
										"toggleActive",
										"1"
									]
								},
								"description": "This endpoint sends an HTTP PUT request to toggle the active status of a brand with the ID 2."
							},
							"response": []
						}
					]
				},
				{
					"name": "Creators",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"creator_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"creator_id\": null,\r\n    \"mobile\": null,\r\n    \"email\": null,\r\n    \"email_verified_at\": null,\r\n    \"creator_name\": null,\r\n    \"logo\": null,\r\n    \"bio\": null,\r\n    \"address\": null,\r\n    \"IBAN_no\": null,\r\n    \"Mawthooq_no\": null,\r\n    \"brith_date\": null,\r\n    \"deleted_at\": null,\r\n    \"created_at\": null,\r\n    \"updated_at\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}creators",
									"host": [
										"{{admin}}creators"
									]
								},
								"description": "\n### GET /creators\n\nThis endpoint retrieves a list of creators.\n\n#### Request Parameters\n- `paginationCounter` (integer): The pagination counter.\n- `page` (integer): The page number.\n- `sortColumn` (string): The column to sort by.\n- `sortDirection` (string): The direction of sorting.\n- `dateFrom` (string): The start date for filtering.\n- `dateTo` (string): The end date for filtering.\n- `creator_id` (null): The ID of the creator.\n- `mobile` (null): The mobile number of the creator.\n- `email` (null): The email of the creator.\n- `email_verified_at` (null): The date and time when the email was verified.\n- `creator_name` (null): The name of the creator.\n- `logo` (null): The logo of the creator.\n- `bio` (null): The biography of the creator.\n- `address` (null): The address of the creator.\n- `IBAN_no` (null): The IBAN number of the creator.\n- `Mawthooq_no` (null): The Mawthooq number of the creator.\n- `brith_date` (null): The birth date of the creator.\n- `deleted_at` (null): The date and time when the creator was deleted.\n- `created_at` (null): The date and time when the creator was created.\n- `updated_at` (null): The date and time when the creator was last updated.\n\n#### Response (JSON schema)\nThe response schema for this request is not provided.\n"
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}creators/3",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}creators/create",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"creator_name\": \"Ema25d1112\",\r\n    \"mobile\": \"966530408212\",\r\n    \"logo\": \"creators/ema1d.png\",\r\n    \"bio\": \"bio Descriptions11\",\r\n    \"address\": \"Address detail1s11\",\r\n    \"birth_date\": \"1990-11-18\",\r\n    \"IBAN_no\": \"SA0680000470608016177411\",\r\n    \"Mawthooq_no\": \"12222\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}creators",
									"host": [
										"{{admin}}creators"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| creator_name | Creator's name (required) | \"John Doe\" |\n| mobile | Mobile number (required, Saudi Arabia format) | \"966501234567\" |\n| logo | required) | \"logo.png\" |\n| bio | Biography (required) | \"Lorem ipsum dolor sit amet\" |\n| address | Address (required) | \"123 Main Street, City, Country\" |\n| birth_date | Birth date (required, after 1925-07-11, before 10 years ago) | \"1990-05-20\" |\n| IBAN_no | IBAN number (optional, format: SA followed by 22 digits) | \"SA1234567890123456789012\" |\n| Mawthooq_no | Mawthooq number (optional, min: 5, max: 20 characters) | \"ABC123\" |\n| cat_names | Array of category names (required) | \\[\"Category1\", \"Category2\"\\] |\n| cat_names.\\* | Each category name in the array (required, must exist in 'cats' table) | \"Category1\" |"
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}creators/2/edit",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"2",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"creator_name\": \"Ema25d1112\",\r\n    \"mobile\": \"966530408213\",\r\n    \"logo\": \"creators/ema1d.png\",\r\n    \"bio\": \"bio Descriptions11\",\r\n    \"address\": \"Address detail1s11\",\r\n    \"birth_date\": \"1990-11-18\",\r\n    \"IBAN_no\": \"SA0680000470608016177411\",\r\n    \"Mawthooq_no\": \"12222\",\r\n    \"cat_names\": [\"Cat1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}creators/3",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"3"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| creator_name | Creator's name (required) | \"John Doe\" |\n| mobile | Mobile number (required, Saudi Arabia format) | \"966501234567\" |\n| logo | required) | \"logo.png\" |\n| bio | Biography (required) | \"Lorem ipsum dolor sit amet\" |\n| address | Address (required) | \"123 Main Street, City, Country\" |\n| birth_date | Birth date (required, after 1925-07-11, before 10 years ago) | \"1990-05-20\" |\n| IBAN_no | IBAN number (optional, format: SA followed by 22 digits) | \"SA1234567890123456789012\" |\n| Mawthooq_no | Mawthooq number (optional, min: 5, max: 20 characters) | \"ABC123\" |\n| cat_names | Array of category names (required) | \\[\"Category1\", \"Category2\"\\] |\n| cat_names.\\* | Each category name in the array (required, must exist in 'cats' table) | \"Category1\" |"
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}creators/1",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}creators/2/toggleActive/0",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"2",
										"toggleActive",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "sample videos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sampleVideos\": [\r\n        {\r\n            \"video_url\": \"https://beta.theb.ai/home\",\r\n            \"video_order_no\": \"1\",\r\n            \"video_image_path\": \"1dsdsdsdffsdf\",\r\n            \"video_description\": \"vcdideo_description\"\r\n        },\r\n        {\r\n            \"video_url\": \"https://beta.theb.ai/home2\",\r\n            \"video_order_no\": \"2\",\r\n            \"video_image_path\": \"1dsdsdsdffsdf\",\r\n            \"video_description\": \"vcdideo_description\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}creators/2/samplevideos",
									"host": [
										"{{admin}}creators"
									],
									"path": [
										"2",
										"samplevideos"
									]
								},
								"description": "### Request Body Parameters\n\n| Field | Description | Example Value |\n| --- | --- | --- |\n| sampleVideos | Array of sample videos (required) | \\[{\"video_url\": \"[video.mp4\"](https://video.mp4), \"video_order_no\": 1, \"video_image_path\": \"[image.png\"](https://image.png), \"video_description\": \"Sample video description\"}\\] |\n| sampleVideos.\\*.video_url | (required, min: 3, max: 190 characters) | \"video.mp4\" |\n| sampleVideos.\\*.video_order_no | Order number of the video (required, numeric, min: 0, max: 10000) | 1 |\n| sampleVideos.\\*.video_image_path | Image path of the video (required, min: 10, max: 190 characters) | \"[image.png\"](https://image.png) |\n| sampleVideos.\\*.video_description | Description of the video (optional, min: 10, max: 200 characters) | \"This is a sample video description\" |"
							},
							"response": []
						}
					]
				},
				{
					"name": "Campaign",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": \"100\",\r\n    \"page\": \"1\",\r\n    \"sortColumn\": \"campaign_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"campaign_id\":\"\",\r\n    \"campaign_title\":\"\",\r\n    \"campaign_status\":\"\",\r\n    \"campaign_description\":\"\",\r\n    \"start_at\":\"\",\r\n    \"close_at\":\"\",\r\n    \"conditions\":\"\",\r\n    \"product_image\":\"\",\r\n    \"ugc_no\":\"\",\r\n    \"ugc_videos_no\":\"\",\r\n    \"video_seconds_min\":\"\",\r\n    \"video_seconds_max\":\"\",\r\n    \"video_price\":\"\",\r\n    \"total_price\":\"\",\r\n    \"is_usg_show\":\"\",\r\n    \"is_brand_show\":\"\",\r\n    \"is_tiktok\":\"\",\r\n    \"is_instagram\":\"\",\r\n    \"is_youtube\":\"\",\r\n    \"is_sent_to_content_creator\":\"\",\r\n    \"deleted_at\":\"\",\r\n    \"created_at\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}campaigns",
									"host": [
										"{{admin}}campaigns"
									]
								},
								"description": "\n### GET /admin/campaigns\n\nThis endpoint retrieves a list of campaigns based on the provided filters and pagination parameters.\n\n**Request Parameters:**\n- `paginationCounter` (string, optional): The pagination counter.\n- `page` (string, optional): The page number.\n- `sortColumn` (string, optional): The column to sort by.\n- `sortDirection` (string, optional): The direction for sorting.\n- `dateFrom` (string, optional): The start date for filtering.\n- `dateTo` (string, optional): The end date for filtering.\n- `campaign_id` (string, optional): The ID of the campaign.\n- `campaign_title` (string, optional): The title of the campaign.\n- `campaign_status` (string, optional): The status of the campaign.\n- `campaign_description` (string, optional): The description of the campaign.\n- `start_at` (string, optional): The start date of the campaign.\n- `close_at` (string, optional): The end date of the campaign.\n- `conditions` (string, optional): The conditions for the campaign.\n- `product_image` (string, optional): The image of the product.\n- `ugc_no` (string, optional): The UGC number.\n- `ugc_videos_no` (string, optional): The number of UGC videos.\n- `video_seconds_min` (string, optional): The minimum duration of the video.\n- `video_seconds_max` (string, optional): The maximum duration of the video.\n- `video_price` (string, optional): The price of the video.\n- `total_price` (string, optional): The total price.\n- `is_usg_show` (string, optional): Indicates if UGC is shown.\n- `is_brand_show` (string, optional): Indicates if the brand is shown.\n- `is_tiktok` (string, optional): Indicates if TikTok is used.\n- `is_instagram` (string, optional): Indicates if Instagram is used.\n- `is_youtube` (string, optional): Indicates if YouTube is used.\n- `is_sent_to_content_creator` (string, optional): Indicates if sent to content creator.\n- `deleted_at` (string, optional): The deletion date.\n- `created_at` (string, optional): The creation date.\n\n**Response:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"data\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"campaign_id\": {\n                    \"type\": \"integer\"\n                  },\n                  \"campaign_no\": {\n                    \"type\": \"string\"\n                  },\n                  \"brand_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"campaign_status\": {\n                    \"type\": \"string\"\n                  },\n                  \"reject_reason\": {\n                    \"type\": [\"string\", \"null\"]\n                  },\n                  \"campaign_title\": {\n                    \"type\": \"string\"\n                  },\n                  \"campaign_description\": {\n                    \"type\": \"string\"\n                  },\n                  \"start_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"close_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"conditions\": {\n                    \"type\": \"string\"\n                  },\n                  \"product_image\": {\n                    \"type\": \"string\"\n                  },\n                  \"ugc_no\": {\n                    \"type\": \"string\"\n                  },\n                  \"ugc_videos_no\": {\n                    \"type\": \"string\"\n                  },\n                  \"video_seconds_min\": {\n                    \"type\": \"string\"\n                  },\n                  \"video_seconds_max\": {\n                    \"type\": \"string\"\n                  },\n                  \"video_price\": {\n                    \"type\": \"string\"\n                  },\n                  \"total_price\": {\n                    \"type\": \"string\"\n                  },\n                  \"is_usg_show\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"is_brand_show\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"is_tiktok\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"is_instagram\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"is_youtube\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"is_sent_to_content_creator\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"city_names\": {\n                    \"type\": \"array\"\n                  },\n                  \"cat_names\": {\n                    \"type\": \"array\"\n                  },\n                  \"deleted_at\": {\n                    \"type\": [\"string\", \"null\"]\n                  },\n                  \"created_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"updated_at\": {\n                    \"type\": \"string\"\n                  },\n                  \"created_at_human\": {\n                    \"type\": \"string\"\n                  },\n                  \"updated_at_human\": {\n                    \"type\": \"string\"\n                  },\n                  \"deleted_at_human\": {\n                    \"type\": [\"string\", \"null\"]\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"first\": {\n                  \"type\": \"string\"\n                },\n                \"last\": {\n                  \"type\": \"string\"\n                },\n                \"prev\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"next\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"meta\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"current_page\": {\n                  \"type\": \"integer\"\n                },\n                \"from\": {\n                  \"type\": \"integer\"\n                },\n                \"last_page\": {\n                  \"type\": \"integer\"\n                },\n                \"links\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"url\": {\n                        \"type\": [\"string\", \"null\"]\n                      },\n                      \"label\": {\n                        \"type\": \"string\"\n                      },\n                      \"active\": {\n                        \"type\": \"boolean\"\n                      }\n                    }\n                  }\n                },\n                \"path\": {\n                  \"type\": \"string\"\n                },\n                \"per_page\": {\n                  \"type\": \"integer\"\n                },\n                \"to\": {\n                  \"type\": \"integer\"\n                },\n                \"total\": {\n                  \"type\": \"integer\"\n                }\n              }\n            }\n          }\n        },\n        \"errors\": {\n          \"type\": [\"object\", \"null\"]\n        }\n      }\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}campaigns/1",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}campaigns/create",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"brand_id\": \"1\",\r\n    \"campaign_title\": \"Amazing Campaign Title32\",\r\n    \"campaign_description\": \"This is a fantastic campaign description. Exciting!\",\r\n    \"start_at\": \"2024-08-27T16:51:33.000000Z\",\r\n    \"close_at\": \"2024-10-27T16:51:33.000000Z\",\r\n    \"conditions\": \"These are the campaign conditions. Please read carefully.\",\r\n    \"product_image\": \"campains/product_images/product_image.jpg\",\r\n    \"ugc_no\": 50,\r\n    \"ugc_videos_no\": 500,\r\n    \"video_seconds_min\": 10,\r\n    \"video_seconds_max\": 3600,\r\n    \"video_price\": 5000,\r\n    \"is_usg_show\": true,\r\n    \"is_brand_show\": false,\r\n    \"is_tiktok\": true,\r\n    \"is_instagram\": true,\r\n    \"is_youtube\": 0,\r\n    \"is_sent_to_content_creator\": 1,\r\n    \"cat_names\": [\"Cat1\", \"Cat2\"],\r\n    \"city_names\": [\"Dammam\", \"Jeddah\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}campaigns",
									"host": [
										"{{admin}}campaigns"
									]
								},
								"description": "### API Validation Rules\n\n| Field Name | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- |\n| `brand_id` | \\`required | exists:brands,brand_id\\` | `1` |\n| `campaign_title` | \\`required | min:10 | max:190 |\n| `campaign_description` | \\`required | min:20 | max:200\\` |\n| `start_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:current_time\\` |\n| `close_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:start_at\\` |\n| `conditions` | \\`required | min:20 | max:200\\` |\n| `product_image` | \\`required | min:10 | max:190\\` |\n| `ugc_no` | \\`required | numeric | min:1 |\n| `ugc_videos_no` | \\`required | numeric | min:1 |\n| `video_seconds_min` | \\`required | numeric | min:1 |\n| `video_seconds_max` | \\`required | numeric | min:1 |\n| `video_price` | \\`required | min:1 | max:10000\\` |\n| `is_usg_show` | \\`required | boolean\\` | `true` |\n| `is_brand_show` | \\`required | boolean\\` | `false` |\n| `is_tiktok` | \\`required | boolean\\` | `true` |\n| `is_instagram` | \\`required | boolean\\` | `false` |\n| `is_youtube` | \\`required | boolean\\` | `true` |\n| `is_sent_to_content_creator` | \\`required | boolean\\` | `false` |\n| `cat_names` | \\`required | array\\` | `[\"Fashion\", \"Electronics\"]` |\n| `cat_names.\\*` | \\`required | exists:cats,cat_name\\` | `Fashion` |\n| `city_names` | \\`required | array\\` | `[\"New York\", \"Los Angeles\"]` |\n| `city_names.\\*` | \\`required | exists:cities,city_name\\` | `New York` |"
							},
							"response": []
						},
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}campaigns/1/edit",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"campaign_title\": \"Amazing Campaign Title32\",\r\n    \"campaign_description\": \"This is a fantastic campaign description. Exciting!\",\r\n    \"start_at\": \"2024-08-27T16:51:33.000000Z\",\r\n    \"close_at\": \"2024-10-27T16:51:33.000000Z\",\r\n    \"conditions\": \"These are the campaign conditions. Please read carefully.\",\r\n    \"product_image\": \"campains/product_images/product_image.jpg\",\r\n    \"ugc_no\": 50,\r\n    \"ugc_videos_no\": 500,\r\n    \"video_seconds_min\": 10,\r\n    \"video_seconds_max\": 3600,\r\n    \"video_price\": 5000,\r\n    \"is_usg_show\": true,\r\n    \"is_brand_show\": false,\r\n    \"is_tiktok\": true,\r\n    \"is_instagram\": true,\r\n    \"is_youtube\": 0,\r\n    \"is_sent_to_content_creator\": 1,\r\n    \"cat_names\": [\"Cat1\", \"Cat2\"],\r\n    \"city_names\": [\"Dammam\", \"Jeddah\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}campaigns/2",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"2"
									]
								},
								"description": "### API Validation Rules\n\n| Field Name | Validation Rules | Example Value | Description |\n| --- | --- | --- | --- |\n| `campaign_title` | \\`required | min:10 | max:190 |\n| `campaign_description` | \\`required | min:20 | max:200\\` |\n| `start_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:current_time\\` |\n| `close_at` | \\`required | date_format:Y-m-d\\\\TH:i:s.u\\\\Z | after:start_at\\` |\n| `conditions` | \\`required | min:20 | max:200\\` |\n| `product_image` | \\`required | min:10 | max:190\\` |\n| `ugc_no` | \\`required | numeric | min:1 |\n| `ugc_videos_no` | \\`required | numeric | min:1 |\n| `video_seconds_min` | \\`required | numeric | min:1 |\n| `video_seconds_max` | \\`required | numeric | min:1 |\n| `video_price` | \\`required | min:1 | max:10000\\` |\n| `is_usg_show` | \\`required | boolean\\` | `true` |\n| `is_brand_show` | \\`required | boolean\\` | `false` |\n| `is_tiktok` | \\`required | boolean\\` | `true` |\n| `is_instagram` | \\`required | boolean\\` | `false` |\n| `is_youtube` | \\`required | boolean\\` | `true` |\n| `is_sent_to_content_creator` | \\`required | boolean\\` | `false` |\n| `cat_names` | \\`required | array\\` | `[\"Fashion\", \"Electronics\"]` |\n| `cat_names.\\*` | \\`required | exists:cats,cat_name\\` | `Fashion` |\n| `city_names` | \\`required | array\\` | `[\"New York\", \"Los Angeles\"]` |\n| `city_names.\\*` | \\`required | exists:cities,city_name\\` | `New York` |"
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}campaigns/1",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"campaign_status\": \"Active\",\r\n    \"reject_reason\": \"Not quited  \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}campaigns/1/updateStatus",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"1",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| campaign_status | required, and must be one of: UnderReview, Rejected, Active, Complete, Stoped, Ended | Active |\n| reject_reason | required, if rejected | Not applay our rules |"
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}campaigns/2/toggleActive/0",
									"host": [
										"{{admin}}campaigns"
									],
									"path": [
										"2",
										"toggleActive",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "ToggleActive - Inactive",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{brand}}campaigns/1/toggleActive/0",
											"host": [
												"{{brand}}campaigns"
											],
											"path": [
												"1",
												"toggleActive",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:42:45 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"cat_id\": 1,\n            \"cat_name\": \"Musisc2\",\n            \"deleted_at\": null,\n            \"created_at\": \"2024-07-16 08:31:09\",\n            \"updated_at\": \"2024-07-16 08:34:06\"\n        }\n    },\n    \"errors\": null\n}"
								},
								{
									"name": "ToggleActive - Active",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{brand}}campaigns/2/toggleActive/1",
											"host": [
												"{{brand}}campaigns"
											],
											"path": [
												"2",
												"toggleActive",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 16 Jul 2024 08:42:45 GMT"
										},
										{
											"key": "Server",
											"value": "Apache/2.4.54 (Win64) PHP/8.1.13 mod_fcgid/2.3.10-dev"
										},
										{
											"key": "Vary",
											"value": "Authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "PHP/8.1.13"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Accept-Language",
											"value": "ar"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5, max=100"
										},
										{
											"key": "Connection",
											"value": "Keep-Alive"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"message\": \"تم التحديث\",\n    \"data\": {\n        \"item\": {\n            \"cat_id\": 1,\n            \"cat_name\": \"Musisc2\",\n            \"deleted_at\": null,\n            \"created_at\": \"2024-07-16 08:31:09\",\n            \"updated_at\": \"2024-07-16 08:34:06\"\n        }\n    },\n    \"errors\": null\n}"
								}
							]
						}
					]
				},
				{
					"name": "CampaignRequest",
					"item": [
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}requests/1/edit",
									"host": [
										"{{admin}}requests"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"explanation\": \"This request explanation of campaign 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}requests/1",
									"host": [
										"{{admin}}requests"
									],
									"path": [
										"1"
									]
								},
								"description": "| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| explanation | string | required, min:5, max:500, | \"This request explanation of campaign 1\" |"
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}requests/1",
									"host": [
										"{{admin}}requests"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"request_status\": \"RequestAccepted\",\r\n    \"request_reject_reason\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}requests/5/updateStatus",
									"host": [
										"{{admin}}requests"
									],
									"path": [
										"5",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| request_status | required, and must be one of: 'RequestRecieved', 'RequestAccepted', 'RequestRejected', 'RequestCompleted' | RequestRecieved |\n| request_reject_reason | required, if RequestRejected | Not applay our rules |"
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}requests/1/toggleActive/1",
									"host": [
										"{{admin}}requests"
									],
									"path": [
										"1",
										"toggleActive",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RequestVideos",
					"item": [
						{
							"name": "edit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{admin}}requestvideos/1/edit",
									"host": [
										"{{admin}}requestvideos"
									],
									"path": [
										"1",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n    \"explanation\": \"This request explanation of campaign 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}requestvideos/1",
									"host": [
										"{{admin}}requestvideos"
									],
									"path": [
										"1"
									]
								},
								"description": "### API Validation Rules  \n\n| Field Name             | Validation Rules                                   | Example Value                  | Description                                                    |\n|------------------------|---------------------------------------------------|--------------------------------|----------------------------------------------------------------|\n| `request_id`           | `required|exists:campaign_requests,request_id`   | `123`                          | Required. Must exist in the `campaign_requests` table.        |\n| `video_url`            | `required|url|min:5|max:191`                      | `https://example.com/video`   | Required. Must be a valid URL, min 5 and max 191 characters.  |\n| `video_image_path`     | `required|min:5|max:191`                          | `path/to/image.jpg`           | Required. Min 5 and max 191 characters.                        |\n| `video_description`    | `required|min:5|max:500`                          | `This is a video description.` | Required. Min 5 and max 500 characters.                        |\n "
							},
							"response": []
						},
						{
							"name": "Destroy",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{admin}}requestvideos/1",
									"host": [
										"{{admin}}requestvideos"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"video_status\": \"VideoRejected\",\r\n    \"video_reject_reason\": \"THis is basd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{admin}}requestvideos/1/updateStatus",
									"host": [
										"{{admin}}requestvideos"
									],
									"path": [
										"1",
										"updateStatus"
									]
								},
								"description": "| Field | Rules | Example |\n| --- | --- | --- |\n| video_status | required, and must be one of: 'VideoRecieved', 'VideoAccepted', 'VideoRejected' | VideoAccepted |"
							},
							"response": []
						},
						{
							"name": "ToggleActive",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{admin}}requestvideos/1/toggleActive/1",
									"host": [
										"{{admin}}requestvideos"
									],
									"path": [
										"1",
										"toggleActive",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authed",
			"item": [
				{
					"name": "Files",
					"item": [
						{
							"name": "uploadFile",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/D:/t/0.png"
										},
										{
											"key": "path",
											"value": "dddd",
											"type": "text"
										},
										{
											"key": "old_file",
											"value": "/152/9157cdb8eefbb7a3901001c17e7fff0025504150.png",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{uploadFile}}",
									"host": [
										"{{uploadFile}}"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| file | file | required, mimes:jpeg,bmp,png,pdf,xlsx,docx,mp4,avi,flv, max:516 | \\[file\\] |\n| path | string | required, min:3, max:190 | \"/folder1/filename\" |\n| old_file | string | nullable, min:3, max:190 | \"oldfile.png\" |"
							},
							"response": []
						},
						{
							"name": "deleteFile",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"files\": [\r\n        \"152/0c7ed3d46c168bc4a0dc4826db5184bdc12adad6.png\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{deleteFile}}",
									"host": [
										"{{deleteFile}}"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| files | array | required | \\[file1, file2\\] |"
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "List",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{authed}}cats?paginationCounter=100&page=1&sortColumn=cat_name&sortDirection=ASC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&cat_name=",
									"host": [
										"{{authed}}cats"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "cat_name"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "cat_name",
											"value": ""
										}
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| file | file | required, mimes:jpeg,bmp,png,pdf,xlsx,docx,mp4,avi,flv, max:516 | \\[file\\] |\n| path | string | required, min:3, max:190 | \"/folder1/filename\" |\n| old_file | string | nullable, min:3, max:190 | \"oldfile.png\" |"
							},
							"response": []
						}
					]
				},
				{
					"name": "Cities",
					"item": [
						{
							"name": "List",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{authed}}cities?paginationCounter=100&page=1&sortColumn=city_name&sortDirection=ASC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&city_name=",
									"host": [
										"{{authed}}cities"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "city_name"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "city_name",
											"value": ""
										}
									]
								},
								"description": "### Query Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| paginationCounter | numeric | nullable, min:1, max:1000 | 10 |\n| page | numeric | nullable, min:1, max:1000 | 2 |\n| sortDirection | string | nullable, in:ASC,DESC | \"ASC\" |\n| dateFrom | string | nullable, date_format:Y-m-d H:i:s | \"2024-01-01 12:00:00\" |\n| dateTo | string | nullable, date_format:Y-m-d H:i:s | \"2024-06-30 23:59:59\" |\n| sortColumn | string | nullable, in:city_name,city_id | \"city_name,city_id\" |"
							},
							"response": []
						}
					]
				},
				{
					"name": "Brands",
					"item": [
						{
							"name": "show/profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{authed}}brands/1",
									"host": [
										"{{authed}}brands"
									],
									"path": [
										"1"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name                        | Type    | Constraints                                                    | Example                                   |\n|-----------------------------------|---------|----------------------------------------------------------------|-------------------------------------------|\n| id                                | string  | required, exists:creators,creator_id                          | \"12345\"                                   |\n| creator_name                      | string  | required, min:3, max:60                                      | \"John Doe\"                                |\n| logo                              | string  | required, min:6, max:190                                     | \"logo.png\"                                |\n| bio                               | string  | required, min:10, max:200                                    | \"A short bio\"                             |\n| address                           | string  | required, min:10, max:190                                    | \"1234 Main St, City\"                      |\n| brith_date                        | string  | required, date, after:1925-07-11, before:YYYY-MM-DD           | \"1990-05-20\"                              |\n| IBAN_no                           | string  | nullable, regex:/^SA\\d{22}$/, size:24                         | \"SA1234567890123456789\"                   |\n| Mawthooq_no                       | string  | nullable, min:5, max:20                                      | \"ABC123\"                                  |\n| cat_names                         | array   | required                                                      | [\"Fluffy\", \"Whiskers\"]                    |\n| cat_names.*                       | string  | required, exists:cats,cat_name                                | \"Fluffy\"                                  |\n| sampleVideos                      | array   | required                                                      | [{\"video_url\": \"https://example.com/video1.mp4\", \"video_order_no\": 1, \"video_image_path\": \"video1.png\", \"video_description\": \"Description 1\"}, {\"video_url\": \"https://example.com/video2.mp4\", \"video_order_no\": 2, \"video_image_path\": \"video2.png\"}] |\n| sampleVideos.*.video_url          | string  | required, url, min:3, max:190                                 | \"https://example.com/video1.mp4\"        |\n| sampleVideos.*.video_order_no     | numeric | required, min:0, max:10000                                    | 1                                         |\n| sampleVideos.*.video_image_path   | string  | required, min:10, max:190                                    | \"video1.png\"                              |\n| sampleVideos.*.video_description  | string  | nullable, min:10, max:200                                    | \"Description 1\"                           |"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{authed}}brands?paginationCounter=100&page=1&sortColumn=brand_id&sortDirection=DESC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&brand_id=&brand_name=&mobile=&email=&email_verified_at=&logo=&website_url=&description=&address=&branches_no=&tax_no=&cr_no=&deleted_at=&created_at=&updated_at=",
									"host": [
										"{{authed}}brands"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "brand_id"
										},
										{
											"key": "sortDirection",
											"value": "DESC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "brand_id",
											"value": ""
										},
										{
											"key": "brand_name",
											"value": ""
										},
										{
											"key": "mobile",
											"value": ""
										},
										{
											"key": "email",
											"value": ""
										},
										{
											"key": "email_verified_at",
											"value": ""
										},
										{
											"key": "logo",
											"value": ""
										},
										{
											"key": "website_url",
											"value": ""
										},
										{
											"key": "description",
											"value": ""
										},
										{
											"key": "address",
											"value": ""
										},
										{
											"key": "branches_no",
											"value": ""
										},
										{
											"key": "tax_no",
											"value": ""
										},
										{
											"key": "cr_no",
											"value": ""
										},
										{
											"key": "deleted_at",
											"value": ""
										},
										{
											"key": "created_at",
											"value": ""
										},
										{
											"key": "updated_at",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authed}}brands/2",
									"host": [
										"{{authed}}brands"
									],
									"path": [
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Creators",
					"item": [
						{
							"name": "show/profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{authed}}creators/1",
									"host": [
										"{{authed}}creators"
									],
									"path": [
										"1"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name                        | Type    | Constraints                                                    | Example                                   |\n|-----------------------------------|---------|----------------------------------------------------------------|-------------------------------------------|\n| id                                | string  | required, exists:creators,creator_id                          | \"12345\"                                   |\n| creator_name                      | string  | required, min:3, max:60                                      | \"John Doe\"                                |\n| logo                              | string  | required, min:6, max:190                                     | \"logo.png\"                                |\n| bio                               | string  | required, min:10, max:200                                    | \"A short bio\"                             |\n| address                           | string  | required, min:10, max:190                                    | \"1234 Main St, City\"                      |\n| brith_date                        | string  | required, date, after:1925-07-11, before:YYYY-MM-DD           | \"1990-05-20\"                              |\n| IBAN_no                           | string  | nullable, regex:/^SA\\d{22}$/, size:24                         | \"SA1234567890123456789\"                   |\n| Mawthooq_no                       | string  | nullable, min:5, max:20                                      | \"ABC123\"                                  |\n| cat_names                         | array   | required                                                      | [\"Fluffy\", \"Whiskers\"]                    |\n| cat_names.*                       | string  | required, exists:cats,cat_name                                | \"Fluffy\"                                  |\n| sampleVideos                      | array   | required                                                      | [{\"video_url\": \"https://example.com/video1.mp4\", \"video_order_no\": 1, \"video_image_path\": \"video1.png\", \"video_description\": \"Description 1\"}, {\"video_url\": \"https://example.com/video2.mp4\", \"video_order_no\": 2, \"video_image_path\": \"video2.png\"}] |\n| sampleVideos.*.video_url          | string  | required, url, min:3, max:190                                 | \"https://example.com/video1.mp4\"        |\n| sampleVideos.*.video_order_no     | numeric | required, min:0, max:10000                                    | 1                                         |\n| sampleVideos.*.video_image_path   | string  | required, min:10, max:190                                    | \"video1.png\"                              |\n| sampleVideos.*.video_description  | string  | nullable, min:10, max:200                                    | \"Description 1\"                           |"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{authed}}creators?paginationCounter=100&page=1&sortColumn=creator_id&sortDirection=DESC&dateFrom=2021-06-08 00:00:00&dateTo=2025-06-08 23:59:59&creator_id=&mobile=&email=&email_verified_at=&creator_name=&logo=&bio=&address=&IBAN_no=&Mawthooq_no=&brith_date=&deleted_at=&created_at=&updated_at=",
									"host": [
										"{{authed}}creators"
									],
									"query": [
										{
											"key": "paginationCounter",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sortColumn",
											"value": "creator_id"
										},
										{
											"key": "sortDirection",
											"value": "DESC"
										},
										{
											"key": "dateFrom",
											"value": "2021-06-08 00:00:00"
										},
										{
											"key": "dateTo",
											"value": "2025-06-08 23:59:59"
										},
										{
											"key": "creator_id",
											"value": ""
										},
										{
											"key": "mobile",
											"value": ""
										},
										{
											"key": "email",
											"value": ""
										},
										{
											"key": "email_verified_at",
											"value": ""
										},
										{
											"key": "creator_name",
											"value": ""
										},
										{
											"key": "logo",
											"value": ""
										},
										{
											"key": "bio",
											"value": ""
										},
										{
											"key": "address",
											"value": ""
										},
										{
											"key": "IBAN_no",
											"value": ""
										},
										{
											"key": "Mawthooq_no",
											"value": ""
										},
										{
											"key": "brith_date",
											"value": ""
										},
										{
											"key": "deleted_at",
											"value": ""
										},
										{
											"key": "created_at",
											"value": ""
										},
										{
											"key": "updated_at",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "View",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authed}}creators/3",
									"host": [
										"{{authed}}creators"
									],
									"path": [
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Campain",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.globals.get('token'))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paginationCounter\": 100,\r\n    \"page\": 1,\r\n    \"sortColumn\": \"campaign_id\",\r\n    \"sortDirection\": \"DESC\",\r\n    \"dateFrom\": \"2021-06-08 00:00:00\",\r\n    \"dateTo\": \"2025-06-08 23:59:59\",\r\n    \"brand_id\": \"\",\r\n    \"campaign_id\": \"\",\r\n    \"campaign_title\": \"\",\r\n    \"campaign_description\": \"\",\r\n    \"start_at\": \"\",\r\n    \"close_at\": \"\",\r\n    \"conditions\": \"\",\r\n    \"product_image\": \"\",\r\n    \"ugc_no\": \"\",\r\n    \"ugc_videos_no\": \"\",\r\n    \"video_seconds_min\": \"\",\r\n    \"video_seconds_max\": \"\",\r\n    \"video_price\": \"\",\r\n    \"total_price\": \"\",\r\n    \"is_usg_show\": \"\",\r\n    \"is_brand_show\": \"\",\r\n    \"is_tiktok\": \"\",\r\n    \"is_instagram\": \"\",\r\n    \"is_youtube\": \"\",\r\n    \"is_sent_to_content_creator\": \"\",\r\n    \"deleted_at\": \"\",\r\n    \"created_at\": \"\",\r\n    \"updated_at\": \"\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{authed}}campaigns",
									"host": [
										"{{authed}}campaigns"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CampaignRequest",
					"item": [
						{
							"name": "List",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authed}}requests",
									"host": [
										"{{authed}}requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "show",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"campaign_id\": \"1\", \r\n    \"explanation\": \"This request explanation of campaign 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authed}}requests/1",
									"host": [
										"{{authed}}requests"
									],
									"path": [
										"1"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| explanation | string | required, min:5, max:500, | \"This request explanation of campaign 1\" |\n| campaign_id | string | required, exists:campaigns,campaign_id | 1 |"
							},
							"response": []
						}
					]
				},
				{
					"name": "RequestVideos",
					"item": [
						{
							"name": "List",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authed}}requestvideos",
									"host": [
										"{{authed}}requestvideos"
									]
								}
							},
							"response": []
						},
						{
							"name": "show",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"campaign_id\": \"1\", \r\n    \"explanation\": \"This request explanation of campaign 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authed}}requestvideos/2",
									"host": [
										"{{authed}}requestvideos"
									],
									"path": [
										"2"
									]
								},
								"description": "### Request Body Parameters\n\n| Field Name | Type | Constraints | Example |\n| --- | --- | --- | --- |\n| explanation | string | required, min:5, max:500, | \"This request explanation of campaign 1\" |\n| campaign_id | string | required, exists:campaigns,campaign_id | 1 |"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var Header = require('postman-collection').Header;\r",
					"pm.request.headers.add(new Header(\"Accept:application/json\"))\r",
					"pm.request.headers.add(new Header(\"Content-Type:application/json\"))\r",
					"pm.request.headers.add(new Header(\"Accept-Language:\"+pm.variables.get(\"lang\")))"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "lang",
			"value": "ar",
			"type": "string"
		},
		{
			"key": "local",
			"value": "http://6steps.com/",
			"type": "string"
		},
		{
			"key": "online",
			"value": "https://api.6stepsa.com/",
			"type": "string"
		},
		{
			"key": "domain",
			"value": "{{online}}",
			"type": "string"
		},
		{
			"key": "admin",
			"value": "{{domain}}admin/",
			"type": "string"
		},
		{
			"key": "brand",
			"value": "{{domain}}brand/",
			"type": "string"
		},
		{
			"key": "creator",
			"value": "{{domain}}creator/",
			"type": "string"
		},
		{
			"key": "api",
			"value": "{{domain}}api/",
			"type": "string"
		},
		{
			"key": "apiadmin",
			"value": "{{api}}admin/",
			"type": "string"
		},
		{
			"key": "apibrand",
			"value": "{{api}}brand/",
			"type": "string"
		},
		{
			"key": "apicreator",
			"value": "{{api}}creator/",
			"type": "string"
		},
		{
			"key": "authed",
			"value": "{{domain}}authed/",
			"type": "string"
		},
		{
			"key": "deleteFile",
			"value": "{{authed}}deleteFile",
			"type": "string"
		},
		{
			"key": "uploadFile",
			"value": "{{authed}}uploadFile",
			"type": "string"
		}
	]
}